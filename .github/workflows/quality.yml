# This file is restructured with the help of ChatGPT
name: Continuous Integration

on:
  push:
    # change to main before final deploy
    branches: [ "**" ]  # All branches

  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt

      #basic pytest and pylint, will be extended later
      - name: Run tests with coverage
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest --cov=review_rating review_rating

      - name: Generate coverage report
        run: |
          coverage xml
          coverage html

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
      
      - name: Run pylint and update badge with gradient color
        env:
          PYTHONPATH: .
        run: |
          pip install pylint bc
          pylint review_rating/modeling review_rating/tests --rcfile=.pylintrc --score=y > pylint_output.txt || true
          SCORE=$(grep "Your code has been rated at" pylint_output.txt | awk '{print $7}' | cut -d'/' -f1)
          SCORE_CLEAN=$(printf "%.2f" "$SCORE")
      
          # Set badge color gradient
          if (( $(echo "$SCORE >= 9.5" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$SCORE >= 8.5" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "$SCORE >= 7.5" | bc -l) )); then
            COLOR="yellowgreen"
          elif (( $(echo "$SCORE >= 6.5" | bc -l) )); then
            COLOR="yellow"
          elif (( $(echo "$SCORE >= 5.0" | bc -l) )); then
            COLOR="orange"
          else
            COLOR="red"
          fi
      
          BADGE="![pylint](https://img.shields.io/badge/PyLint-${SCORE_CLEAN}-${COLOR}?logo=python&logoColor=white)"
      
          sed -i "s|!\[pylint\](.*)|${BADGE}|" README.md || echo "No badge found to replace"
            
      - name: Commit updated README badge
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update pylint badge score to ${SCORE_CLEAN}" || echo "No changes"
          git push || echo "Skipping push on PR"

      - name: Update test coverage badge
        run: |
          COVERAGE=$(coverage report | grep TOTAL | awk '{print $4}' | sed 's/%//')
          COVERAGE_CLEAN=$(printf "%.0f" "$COVERAGE")
      
          # Set badge color gradient
          if (( $(echo "$COVERAGE_CLEAN >= 90" | bc -l) )); then
            COLOR="brightgreen"
          elif (( $(echo "$COVERAGE_CLEAN >= 75" | bc -l) )); then
            COLOR="green"
          elif (( $(echo "$COVERAGE_CLEAN >= 50" | bc -l) )); then
            COLOR="yellow"
          else
            COLOR="red"
          fi
      
          # Create badge
          BADGE="![coverage](https://img.shields.io/badge/Coverage-${COVERAGE_CLEAN}%25-${COLOR}?logo=pytest&logoColor=white)"
      
          # Replace in README
          sed -i "s|!\[coverage\](.*)|${BADGE}|" README.md || echo "No coverage badge found to replace"

      - name: Commit coverage badge
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          git commit -m "Update coverage badge" || echo "No changes"
          git push || echo "Skipping push on PR"
          
      - name: Run flake8
        run: |
          pip install flake8
          flake8 review_rating

      - name: Run Bandit
        run: |
          pip install bandit
          bandit -r review_rating -c bandit.yaml


      - name: Calculate ML Test Score (by test files)
        run: |
          echo "## ML Test Score Summary"
          
          output=$(pytest review_rating/tests/ | tee tmp.txt)

          count_feature=$(grep -E "test_features_and_data\.py .* PASSED" tmp.txt | wc -l)
          count_model=$(grep -E "test_model\.py .* PASSED" tmp.txt | wc -l)
          count_infra=$(grep -E "test_infrastructure\.py .* PASSED" tmp.txt | wc -l)
          count_monitor=$(grep -E "test_monitoring\.py .* PASSED" tmp.txt | wc -l)
          
          echo "Feature tests passed: $count_feature"
          echo "Model tests passed: $count_model"
          echo "Infra tests passed: $count_infra"
          echo "Monitoring tests passed: $count_monitor"

          score=0
          [ "$count_feature" -gt 0 ] && score=$((score+1))
          [ "$count_model" -gt 0 ] && score=$((score+1))
          [ "$count_infra" -gt 0 ] && score=$((score+1))
          [ "$count_monitor" -gt 0 ] && score=$((score+1))
      
          echo $count_feature
          echo "Final ML Test Score: $score/4"
          echo "ml_score=$score" >> $GITHUB_ENV
      

          # Create ML score badge
          if [ "$score" -eq 4 ]; then
            COLOR="brightgreen"
          elif [ "$score" -eq 3 ]; then
            COLOR="green"
          elif [ "$score" -eq 2 ]; then
            COLOR="yellow"
          else
            COLOR="red"
          fi

          BADGE_URL="https://img.shields.io/badge/ML%20Test%20Score-${score}%2F4-${COLOR}?logo=pytest&logoColor=white"
          BADGE="![ml-score](https://img.shields.io/badge/ML%20Test%20Score-${score}%2F4-${COLOR}?logo=pytest&logoColor=white)"
          sed -i "s|!\[ml-score\](.*)|${BADGE}|" README.md
            
      - name: Save ML score to file
        run: |
          echo "$score" > ml_score.txt
     
      - name: Commit updated ML score and badge (only on main)
        run: |
          mkdir -p metrics
          mv ml_score.txt metrics/ml_score.txt

          git config user.name github-actions
          git config user.email github-actions@github.com

          git add README.md metrics/ml_score.txt || echo "Nothing to add"
          git commit -m "Update ML Test Score badge and metrics" || echo "No changes to commit"
          git push || echo "Push skipped (e.g. PR build)"

# TRY TESTING IT HERE INSTEAD OF GIT ALSO REPLACE * WITH MAIN